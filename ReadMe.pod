=pod

=for comment
DO NOT EDIT. This Pod was generated by Swim v0.1.37.
See http://github.com/ingydotnet/swim-pm#readme

=encoding utf8

=head1 Name

git-subrepo(1) - Git Submodule Alternative

=for html
<a href="https://travis-ci.org/ingydotnet/git-subrepo"><img src="https://travis-ci.org/ingydotnet/git-subrepo.png" alt="git-subrepo"></a>

=head1 Synopsis

    git subrepo -h    # Short usage help

    git subrepo clone <remote-url> [<subdir>]
    git subrepo pull <subdir>
    git subrepo push <subdir>

    git subrepo branch <subdir>
    git subrepo checkout <subdir>
    git subrepo fetch <subdir>
    git subrepo commit <subdir>
    git subrepo reset [<branch>]

    git subrepo status [<subdir>]
    git subrepo log <subdir>
    git subrepo clean <subdir>

    git subrepo help [<command>]
    git subrepo version

=head1 Description

This git command "clones" an external git repo into a subdirectory of your
repo. Later on, upstream changes can be pulled in, and local changes can be
pushed back. Simple.

=head1 Benefits

This command is an improvement from C<git-submodule> and C<git-subtree>; two
other git commands with similar goals, but various problems.

It assumes there are 3 main roles of people interacting with a repo, and
attempts to serve them all well:

=over

=item * owner - The person who authorsI<owns>maintains a repo.

=item * users - People who are just using/installing the repo.

=item * collaborators - People who commit code to the repo and subrepos.

=back

The C<git-subrepo> command benefits these roles in the following ways:

=over

=item * Simple and intuitive commandline usage.

=item * Users get your repo and all your subrepos just by cloning your repo.

=item * Users do not need to install git-subrepo, ever.

=item * Collaborators do not need to install unless they want to push/pull.

=item * Collaborators know when a subdir is a subrepo (it has a C<.gitrepo> file).

=item * Well named branches and remotes are generated for manual operations.

=item * Owners do not deal with the complications of keeping submodules in sync.

=item * Subrepos can contain other subrepos.

=item * Branching with subrepos JustWorks™.

=item * Different branches can have different subrepos in different states, etc.

=item * Moving/renaming a subrepo subdir JustWorks™.

=item * Your git history is kept squeaky clean.

=item * Upstream history (clone/pull) is condensed into a single commit.

=item * You can see the complete subrepo history by using C<git subrepo log>.

=item * Commits pushed back upstream are B<not> condensed.

=item * Easy to play around with subrepos and then reset back.

=item * No configuration required.

=item * Does not introduce history that messes up other git commands.

=item * Fixes known rebase failures with C<git-subtree>.

=back

=head1 Installation

The best short answer is:

    git clone https://github.com/ingydotnet/git-subrepo /path/to/git-subrepo
    echo 'source /path/to/git-subrepo/init' >> ~/.bashrc

The complete "Installation Instructions" can be found below.

=head1 Commands

All the B<subrepo> commands use names of actual Git commands and try to do
similar operations to their Git counterparts. They also attempt to give
similar output in an attempt to make the subrepo usage intuitive to
experienced Git users.

Please note that the commands are I<not> exact equivalents, and do not take
all the same arguments. Keep reading…

=over

=item C<< git subrepo clone <repository> [<subdir>] [-b <upstream-branch>] >>

Add a repository as a subrepo in a subdir of your repository.

This is similar in feel to C<git clone>. You just specify the remote repo url,
and optionally a sub-directory and/or branch name. The repo will be fetched
and merged into the subdir.

The subrepo history is I<squashed> into a single commit that contains the
reference information. This information is also stored in a special file
called C<< <subdir>/.gitrepo >>. The presence of this file indicates that the
directory is a subrepo.

All subsequent commands refer to the subrepo by the name of the
I<subdir>. From the subdir, all the current information about the subrepo
can be obtained.

=item C<< git subrepo pull <subdir>|--all [--<strategy>] [-b <branch>] [-r <remote>] [-u] >>

Update the subrepo subdir with the latest remote changes.

The C<pull> command will attempt to do the following commands in one go:

=over

=item * C<< git subrepo fetch <subdir> >>

=item * C<< git subrepo branch <subdir> >>

=item * C<< git checkout subrepo/<subdir> >>

=item * C<< git merge -s <strategy> refs/subrepo/remote/<subdir> >>

=item * C<git subrepo reset>

=item * C<< git subrepo commit <subdir> >>

=back

In other words, you could do all the above commands yourself, for the same
effect. If any of the commands fail, subrepo will reset, and tell you to do
this by hand. Generally a failure would be in the merge, where conflicts can
happen. Since Git has lots of ways to resolve conflicts to your personal
tastes, the subrepo command defers to letting you do this by hand.

Like the C<clone> command, C<pull> will squash all the changes (since the
last pull or clone) into one commit. This keeps your mainline history nice
and clean. You can easily see the subrepo's history with the subrepo
C<log> command.

The above commands are described in detail below. Also see the section on
"Merge Strategy Options".

=item C<< git subrepo push <subdir>|--all [-r <remote>] [-b <branch>] >>

Merge local changes on top of the upstream branch, and push upstream.

We fetch the upstream remote, rebase or merge on top of that head, and push
back to the remote. Effectively we do these commands:

=over

=item * C<< git subrepo fetch <subdir> >>

=item * C<< git subrepo branch <subdir> >>

=item * C<< git rebase refs/subrepo/remote/<subdir> subrepo/<subrepo> >>

=item * C<< git push <remote> subrepo/<subrepo> >>

=back

Like with the C<pull> command, if this fails, you can do these steps by hand.

=item C<< git subrepo branch <subdir>|--all >>

Create a branch C<< subrepo/<subdir> >> with all the subrepo commits.

Scan the history of the mainline for all the commits that affect the C<subdir>
(since the last subrepo pull or clone) and create a new branch from them.

This is useful for doing C<pull> and C<push> commands by hand. The C<checkout>
command uses this command if the branch doesn't already exist (and then does a
C<git checkout> on it).

=item C<< git subrepo checkout <subdir> >>

Shorthand for the following 2 commands:

    git subrepo branch <subdir>
    git checkout subrepo/<subdir>

=item C<< git subrepo fetch <subdir>|--all >>

Fetch the remote/upstream content for a subrepo.

It will create a Git reference called C<< subrepo/remote/<subdir> >> that
points at the same commit as C<FETCH_HEAD>. It will also create a remote
called C<< subrepo/<subdir> >>. These are temporary and you can remove them
easily with the subrepo C<clean> command.

=item C<< git subrepo commit <subdir> >>

Take a properly merged subrepo branch and add it as a single commit.

This command is generally used after a hand-merge. You have done a C<subrepo
checkout> and merged it with the upstream. This command takes the HEAD of that
branch and add it on top of your mainline history.

=item C<< git subrepo reset [<branch>] >>

Checkout and reset to the mainline branch.

When you do a C<subrepo checkout> from a non-subrepo branch, that branch and
its HEAD are saved. This command will reset to those values. This just saves
you the trouble of remembering where you started when you are done with a
subrepo branch.

This is the same as:

    git reset --hard <branch>
    git checkout <branch>

=item C<< git subrepo status [<subdir>] [--quiet] >>

Get the status of a subrepo. Show the status of all subrepos by default. If
the C<--quiet> flag is used, print less info, and on 1 line per subrepo.

If you have a subrepo branch checked out, show the status of that subrepo.

=item C<< git subrepo log <subdir> [<git-log-options>] >>

Show log of the subrepo's upstream commits. Same as:

    git subrepo fetch <subdir>
    git log subrepo/remote/<subdir>

=item C<< git subrepo clean <subdir>|--all >>

Remove artifacts created by C<fetch> and C<branch> commands.

The C<fetch> and C<branch> operations (and other commands that call them)
create temporary things like refs, branches, remotes and grafts. This command
removes all those things.

=item C<git subrepo help>

Same as C<git help subrepo>. Will launch the manpage. For the shorter usage,
use C<git subrepo -h>.

=item C<git subrepo version [--verbose] [--quiet]>

This command will display version information about git-subrepo and its
environment. For just the version number, use C<git subrepo --version>. Use
C<--verbose> for more version info, and C<--quiet> for less.

=back

=head1 Command Options

=over

=item C<-h>

Short help.

=item C<--help>

Long help.

=item C<-a>, C<--all>

If you have multiple subrepos, issue the command to all of them (if
applicable).

=item C<< --branch=<branch-name> >> (C<< -b <branch-name> >>)

Use a different branch-name than the remote HEAD or the one saved in
C<.gitrepo> locally.

=item C<< --remote=<remote-url> >> (C<< -r <remote-url> >>)

Use a different remote-url than the one saved in C<.gitrepo> locally.

=item C<--update> (C<-u>)

If C<-b> or C<-r> are used, and the command updates the C<.gitrepo> file,
include these values to the update.

=back

=head2 Merge Strategy Options

When doing a C<pull> command you can specify a 'merge strategy' to be tried:

=over

=item C<--reclone>

Use this option when you have no local changes to the subrepo, and you simply
want to replace the old content with the new upstream content. If you use C<--
branch> or C<--remote> options with this option, the C<--update> option is
turned on automatically (ie the new remote and branch are stored in .gitrepo
file). This strategy should never fail.

=item C<--rebase>

Attempt a rebase on top off the remote head.

=item C<--merge>

Use the default (recursive) merge strategy.

=item C<--ours>

Use recursive + C<-X ours> option.

=item C<--theirs>

Use recursive + C<-X theirs> option.

=item C<--graft>

This option creates a graft between your local detached subrepo branch and the
fetched upstream branch, so that you can try a hand merge. Some commands like
C<git rebase> seem to need this.

=back

=head1 Installation Instructions

There are currently 3 ways to install C<git-subrepo>. For all of them you need
to get the source code from GitHub:

    git clone https://github.com/ingydotnet/git-subrepo /path/to/git-subrepo

The first installation method is preferred: C<source> the C<init> file. Just
add a line like this one to your shell startup script:

    source /path/to/git-subrepo/init

That will modify your C<PATH> and C<MANPATH>, and also enable command
completion.

The second method is to do these things by hand. This might afford you more
control of your shell environment. Simply add the C<lib> and C<man>
directories to your C<PATH> and C<MANPATH>:

    export PATH="/path/to/git-subrepo/lib:$PATH"
    export MANPATH="/path/to/git-subrepo/man:$MANPATH"

See below for info on how to turn on Command Completion.

The third method is a standard system install, which puts C<git-subrepo> next
to your other git commands:

    make install        # Possibly with 'sudo'

This method does not account for upgrading and command completion yet.

=head1 Upgrading

If you used the C<PATH> method of installation, just run this to upgrade
C<git-subrepo>:

    git subrepo upgrade

Or (same thing):

    cd /path/to/git-subrepo
    git pull

If you used C<make install> method, then run this again (after C<git pull>):

    make install        # Possibly with 'sudo'

=head1 Command Completion

The C<git subrepo> command supports C<< <TAB> >>-based command completion. If
you don't use the C<init> script (see Installation, above), you'll need to
enable this manually to use it.

=head2 In Bash

If your Bash setup does not already provide command completion for Git, you'll
need to enable that first:

    source <Git completion script>

On your system, the Git completion script might be found at any of the
following locations (or somewhere else that we don't know about):

=over

=item * C</etc/bash_completion.d/git>

=item * C</usr/share/bash-completion/git>

=item * C</usr/share/bash-completion/completions/git>

=item * C</opt/local/share/bash-completion/completions/git>

=item * C</usr/local/etc/bash_completion.d/git>

=item * C<~/.homebrew/etc/bash_completion.d/git>

=back

In case you can't find any of these, this repository contains a copy of the
Git completion script:

    source /path/to/git-subrepo/share/git-completion.bash

Once Git completion is enabled (whether you needed to do that manually or
not), you can turn on C<git-subrepo> completion with a command like this:

    source /path/to/git-subrepo/share/completion.bash

=head2 In zsh

In the Z shell (zsh), you can manually enable C<git-subrepo> completion by
adding the following line to your C<~/.zshrc>, B<before> the C<compinit>
function is called:

    fpath=('/path/to/git-subrepo/share/zsh-completion' $fpath)

=head1 Status

The git-subrepo command is coming together nicely, but some details are still
being ironed out. I would not use it for important things yet, but playing
around with it is cheap (this is not C<git submodule>), and not permanent (if
you do not push to public remotes). ie You can always play around and reset
back to the beginning without pain.

This command has a test suite (run C<make test>), but surely has many bugs. If
you have expertise with Git and subcommands, please review the code, and file
issues on anything that seems wrong.

If you want to chat about the C<git-subrepo> command, join C<#git-commands> on
C<irc.freenode.net>.

=head1 Notes

=over

=item * This command currently only works on POSIX systems.

=item * The C<git-subrepo> repo itself has 2 subrepos under the C<ext/> subdirectory.

=item * Written in (very modern) Bash, with full test suite. Take a look.

=back

=head1 Author

Written by Ingy döt Net

=head1 License and Copyright

The MIT License (MIT)

Copyright (c) 2013-2015 Ingy döt Net

=cut
